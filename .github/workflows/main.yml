name: CI/CD Workflow

on:
  pull_request:
    branches: [ master ]
    types: [ opened, closed ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker image
        run: |
          cp .env.dist .env
          cp .deployment/docker/.env.dist .deployment/docker/.env
          make dc_build
          make dc_up
          docker exec php-fpm composer install

  deploy_prod_test:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    env:
      PROJECT_SRC_SSH: ${{ secrets.PROJECT_SRC_SSH }}
      SSH_PRIVATE_KEY_PROD: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
      PROD_HOST: ${{ secrets.PROD_HOST }}
      PROD_DEPLOY_USER: ${{ secrets.PROD_DEPLOY_USER }}
      CURRENT_DEPLOY_DIR: ${{ secrets.CURRENT_DEPLOY_DIR }}
      PREVIOUS_DEPLOY_DIR: ${{ secrets.PREVIOUS_DEPLOY_DIR }}
      DEPLOY_VARS_DIR: ${{ secrets.DEPLOY_VARS_DIR }}
      DEPLOY_DATA_SRC: ${{ secrets.DEPLOY_DATA_SRC }}
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to master
        run: |
          echo "Deploying to master server..."
          echo "$SSH_PRIVATE_KEY_PROD" > private_key
          chmod 600 private_key
          echo "Clone the deploy vars repository"
          ssh -o StrictHostKeyChecking=no -i private_key -tt $PROD_DEPLOY_USER@$PROD_HOST 'set -x; eval $(ssh-agent -s) && ssh-add ~/.ssh/deploy_vars_rsa && git clone ${{ secrets.DEPLOY_DATA_SRC }} ${{ secrets.DEPLOY_VARS_DIR }}'
          echo "Move current data to previous directory"
          ssh -o StrictHostKeyChecking=no -i private_key -tt $PROD_DEPLOY_USER@$PROD_HOST 'set -x; mv -T ${{ secrets.CURRENT_DEPLOY_DIR }} ${{ secrets.PREVIOUS_DEPLOY_DIR }}'
          echo "Clone the project repository"
          ssh -o StrictHostKeyChecking=no -i private_key -tt $PROD_DEPLOY_USER@$PROD_HOST 'set -x; mkdir ${{ secrets.CURRENT_DEPLOY_DIR }} && eval $(ssh-agent -s) && ssh-add ~/.ssh/order_status_rsa && git clone ${{ secrets.PROJECT_SRC_SSH }} ${{ secrets.CURRENT_DEPLOY_DIR }}'
          echo "Copy enviroments"
          ssh -o StrictHostKeyChecking=no -i private_key -tt $PROD_DEPLOY_USER@$PROD_HOST 'set -x; cd ${{ secrets.CURRENT_DEPLOY_DIR }} && cp ${{ secrets.DEPLOY_VARS_DIR }}/order-status-resolver/.env.prod ${{ secrets.CURRENT_DEPLOY_DIR }}/.env && cp ${{ secrets.DEPLOY_VARS_DIR }}/order-status-resolver/deployment/.env.prod ${{ secrets.CURRENT_DEPLOY_DIR }}/.deployment/docker/.env'
          echo "Copy enviroments"
          ssh -o StrictHostKeyChecking=no -i private_key -tt $PROD_DEPLOY_USER@$PROD_HOST 'set -x; cd ${{ secrets.CURRENT_DEPLOY_DIR }} && docker-compose -f ./.deployment/docker/docker-compose.yml --env-file ./.deployment/docker/.env up -d --build && docker exec php-fpm composer install && docker exec php-fpm php bin/console doctrine:migration:migrate'
        shell: bash
